:local dnsName
# Use d for days or w for weeks at the end of variable value
:local Daysbefore 30d 

# Change the value of dnsName to your own
:local dnsName demo.demodns.com

:do { :local cert [/certificate get [find common-name=$dnsName]] } on-error={ :local cert "" }

:if ( [:len $cert] = 0 || [get $cert expires-after] <  $Daysbefore ||  [get $cert expired] )  do={

     # Get LetsEncrypt certificate #
     :if ( [/certificate enable-ssl-certificate dns-name=$dnsName] = 0 ) do={
          :log info "[Letsencrypt] - Certificate Updated"
     } else={
          :log info "[Letsencrypt] - Trying to temporarily open firewall on port 80 and enable webservice"
          :delay 5000ms;
          /ip firewall/filter/add chain=input dst-port=80 protocol=tcp action=accept place-before=0 comment="Letsencrypt"
          /ip service enable [find port=80]
          :if ( [/certificate enable-ssl-certificate dns-name=$dnsName] = 0 ) do={
              :log info "[Letsencrypt] - Certificate Updated - Close ports"
          } else={
              :log error "[Letsencrypt] - Unable to generate certificate - Close ports"
          }
     }
     # Remove custom firewall rule and disable service on port 80
     /ip firewall/filter/remove [find comment="Letsencrypt"]
     /ip service disable [find port=80];

} else={
        :log info "[Letsencrypt] - Nothing to do!"
}

:foreach i in=[/ip hotspot profile find] do={
    :local profileName [/ip hotspot profile get $i name];
    :local loginByHTTPS [/ip hotspot profile get $i login-by];
    
    :if ($loginByHTTPS~"https") do={
        :log info "Update SSL certificate for the profile: $profileName";
        /ip hotspot profile set $i ssl-certificate=[/certificate find where common-name=$dnsName];
    } else {
        :log info "HTTPS login not activated for the profile: $profileName";
    }
}
